-----------------
==> current tasks
-----------------
- complete the os tutorial.

-----------------------
==> categorized backlog
-----------------------
tests:
  - improve compilation tests console messages:
    - info messages should denote the beginning and ending of the test clearly,
      because all the tests are usually run sequentially and output in a single log.
    - it should be indicated clearly if not all tests have succeeded.

x86_bios:
  - optimize the file_io and fat12 libraries:
    - tighter integration with the fat12 driver (ideally should be one standalone driver).

build system:
  - solve the environment setup issue where watcom paths will contain tools that
    conflict with msvc tools also included in path. Location: shell_startup_windows.bat.

handmade_hero:
  - improve collision rule storage data structure to optimize for insertion and clearing.
  - fix buggy Z handling in entity.cpp AddGoundBasedStorageEntity().
  - improve velocity and postition update accuracy in MoveEntity().
  - reduce the number of tested against entities in the sim region
    using spatial partition in MoveEntity().
  - bitmap facing direction should be determined by the Acceleration vector instead
    of the velocity vector in MoveEntity().
  - win32_platform.cpp Win32DisplayBufferInWindow() center when in full screen.
  - win32_platform.cpp Win32FillGlobalSoundBuffer() assert that the returned region sizes
    from Lock() are valid (multiples of 4 bytes).
  - in game.cpp in the simulation region entity processing loop,
    ShadowBitMap alpha/position calculation is impercise, should be after postition update for all entities.
  - in win32_platform.cpp add logging for missed frames.
  - in world.cpp IsOffsetWithinInterval():
    - determine a good safety margin.
    - fix fp math so this should be < & >.
  - in world.cpp CanonicalizeIntervalIndexAndOffset() fix this shit (truncation party).
  - in world.cpp GetWorldPositionFromTilePosition() fix buggy Z handling.

ray_tracer:
  - fix BRDF table lookup or use a different BRDF implementation.

lint:
  - make linting smarter by not having to touch all the files every time.
  - only lint files that were modified since last lint time.
  - this requires that we save the last lint time in a metadata .json file.

compilation_tests:
  - failed tests have extra error information provided.
  - build dependency graph of #include'ed files in compile targets.
  - store the test results permanently, with info about dependencies.
  - check on the last modification before running a test for a target.
  - only rerun the test if necessary, meaning, if one of the target
    dependencies changed since the last test run.

win32/shared:
  - math:
    - create tests for the math library.
    - in simd/4_wide/integers.cpp decide between the 2 HorizontalAdd() implementations.
    - in simd/8_wide/integers.cpp decide between the 2 HorizontalAdd() implementations.
  rasterizer:
    - do a generic implementation for ResizeRenderingBuffer().
  windows:
    - generic implmentation of these 2 functions for the commented out functions.

---------------------
==> application ideas
---------------------
supermarket navigator:
  - a device or app that allows you to navigate inside a large supermarket:
    - using a mobile app, offer accurate navigation inside a building.
    - searching for an item will show you a path to the item position in the store.
    - giving it a list of items will calculate an optimal path to get all the items.
    - mobile app with features for the store:
        - restocking info.
        - demand info.